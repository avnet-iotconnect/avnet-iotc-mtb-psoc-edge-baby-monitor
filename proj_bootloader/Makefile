################################################################################
# \file Makefile
# \version 1.0
#
# \brief
# Makefile for configuring the Cortex-M33 core secure project
#
################################################################################
# \copyright
# $ Copyright 2022-2023 Cypress Semiconductor Corporation (an Infineon company)
# SPDX-License-Identifier: Apache-2.0
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

include ../common.mk

################################################################################
# Basic Configuration
###############################################################################

# Name of application (used to derive name of final linked file).
#
# If APPNAME is edited, ensure to update or regenerate launch
# configurations for your IDE.
APPNAME=proj_bootloader

# If set to "true" or "1", display full command-lines when building.
VERBOSE=

TOOLCHAIN=GCC_ARM

################################################################################
# Advanced Configuration
################################################################################

# Enable optional code that is ordinarily disabled by default.
#
# Available components depend on the specific targeted hardware and firmware
# in use. In general, if you have
#
#    COMPONENTS=foo bar
#
# ... then code in directories named COMPONENT_foo and COMPONENT_bar will be
# added to the build
#
COMPONENTS+=SECURE_DEVICE


# Like COMPONENTS, but disable optional code that was enabled by default.
DISABLE_COMPONENTS+=

# Set this application to run at the CM0+
CORE=CM33
CORE_NAME=CM33_0

# Set this application to be secure
VCORE_ATTRS=SECURE

#Configure this application to be loaded into flash/ram. 
APPTYPE=flash

# By default the build system automatically looks in the Makefile's directory
# tree for source code and builds it. The SOURCES variable can be used to
# manually add source code to the build process from a location not searched
# by default, or otherwise not found by the build system.
SOURCES=

# Like SOURCES, but for include directories. Value should be paths to
# directories (without a leading -I).
INCLUDES=

# Add additional defines to the build process (without a leading -D).
DEFINES+=CYBSP_SKIP_SAU_INIT CYBSP_SKIP_MPC_INIT CYBSP_SKIP_MPU_INIT CYBSP_SKIP_PPC_INIT

# Disable SRF veneer and initialization code.
DEFINES+=MTB_SRF_CUSTOM_REQUEST_SUBMIT CYBSP_DISABLE_SRF_INIT

# Select softfp or hardfp floating point. Default is softfp.
VFP_SELECT+=

# Additional / custom C compiler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
CFLAGS+=

# Additional / custom C++ compiler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
CXXFLAGS+=

# Additional / custom assembler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
ASFLAGS+=

# Additional / custom linker flags.
LDFLAGS+=

# Additional / custom libraries to link in to the application.
LDLIBS+=


# Specify the path to the linker script to use
ifneq (,$(filter $(TOOLCHAIN),GCC_ARM))
    LINKER_SCRIPT_EXT:=ld
else ifeq ($(TOOLCHAIN),ARM)
    LINKER_SCRIPT_EXT:=sct
    # Autogenerated file "cycfg_sau.c" uses default nsc region symbols
    # Bootloader  linker scripts do not have nsc region and it leads to build error
    # with the ARM compiler. Define default NSC_START_ADDRESS and NSC_END_ADDRESS
    # to suppress the build error.
    DEFINES+= NSC_START_ADDRESS=0x0
    DEFINES+= NSC_END_ADDRESS=0x100
    DEFINES+= NSC_SIZE=0x100
    # Suppress linker warnings (unused sections in the linker script)
    LDFLAGS+=--diag_suppress=L6314W,L6329W,L6244E
else ifeq ($(TOOLCHAIN),IAR)
    LINKER_SCRIPT_EXT:=icf
    # Enable variable length arrays
    CFLAGS+=--vla --diag_suppress Pa082,Pe550,Go004
    # Enable code copy for IAR toolchain
    DEFINES+=CY_INIT_CODECOPY_ENABLE
endif

-include ../bsps/TARGET_$(TARGET)/config/GeneratedSource/bootloader_linker_config.mk
# Path to the linker script to use (if empty, use the default linker script).
ifeq ($(LINKER_TYPE),SRAM)
    LINKER_SCRIPT=../bsps/TARGET_$(TARGET)/COMPONENT_$(CORE)/TOOLCHAIN_$(TOOLCHAIN)/bootloader_sram.$(LINKER_SCRIPT_EXT)
else
    LINKER_SCRIPT=../bsps/TARGET_$(TARGET)/COMPONENT_$(CORE)/TOOLCHAIN_$(TOOLCHAIN)/bootloader.$(LINKER_SCRIPT_EXT)
endif

# Default nsc_veneer file must be empty because bootloader does not have NSC region
NSC_VENEER=
################################################################################
# Paths
################################################################################

# Relative path to the project directory (default is the Makefile's directory).
#
# This controls where automatic source code discovery looks for code.
CY_APP_PATH=

# Relative path to the shared repo location.
#
# All .mtb files have the format, <URI>#<COMMIT>#<LOCATION>. If the <LOCATION> field 
# begins with $$ASSET_REPO$$, then the repo is deposited in the path specified by 
# the CY_GETLIBS_SHARED_PATH variable. The default location is one directory level 
# above the current app directory.
# This is used with CY_GETLIBS_SHARED_NAME variable, which specifies the directory name.
CY_GETLIBS_SHARED_PATH=../..

# Directory name of the shared repo location.
#
CY_GETLIBS_SHARED_NAME=mtb_shared

include $(CY_TOOLS_DIR)/make/start.mk
